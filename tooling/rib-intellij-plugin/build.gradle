buildscript {
    dependencies {
        classpath deps.build.intellijPlugin
    }
}

plugins {
    id "com.badoo.ribs.templategenerator"
}

apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: "org.jetbrains.intellij"

group "com.badoo.ribs"

repositories {
    mavenLocal()
}

templates {

    template {
        id = 'leaf_release_0.27'
        name = '[0.27] Leaf node'

        fromProject = project(':templates:release-0.27')
        sourcePackage = 'com.badoo.ribs.template.leaf'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }

    template {
        id = 'leaf_view_only_release_0.27'
        name = '[0.27] Leaf node (view only)'

        fromProject = project(':templates:release-0.27')
        sourcePackage = 'com.badoo.ribs.template.leaf_view_only'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }

    template {
        id = 'router_node_manual_di_release_0.27'
        name = '[0.27] Router node'

        fromProject = project(':templates:release-0.27')
        sourcePackage = 'com.badoo.ribs.template.node'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }

    template {
        id = 'leaf_snapshot'
        name = '[SNAPSHOT] Leaf node'

        fromProject = project(':templates:snapshot')
        sourcePackage = 'com.badoo.ribs.template.leaf'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }

    template {
        id = 'leaf_view_only_snapshot'
        name = '[SNAPSHOT] Leaf node (view only)'

        fromProject = project(':templates:snapshot')
        sourcePackage = 'com.badoo.ribs.template.leaf_view_only'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }

    template {
        id = 'router_node_manual_di_snapshot'
        name = '[SNAPSHOT] Router node'

        fromProject = project(':templates:snapshot')
        sourcePackage = 'com.badoo.ribs.template.node'
        modulePackage = 'com.badoo.ribs.template'
        resources = ['rib_foo_bar.xml']

        token {
            id = "rib_name"
            name = "RIB name"
            sourceValue = "FooBar"
        }
    }
}

dependencies {
    implementation deps.build.commonsLang
    implementation deps.android.annotations
    implementation deps.external.apacheCommons
    implementation deps.external.gson
    
    testImplementation deps.test.junitApi
    testImplementation deps.test.junitParams
    testRuntimeOnly deps.test.junitEngine
    testImplementation deps.test.junitVintage
    testImplementation deps.test.byteBuddy

    testImplementation deps.test.assertj
    testImplementation deps.test.mockitoKotlin
}

// Determines if the machine has Maven credentials.
def hasMavenCredentials() {
    return ext.hasProperty('mavenUser') && ext.hasProperty('mavenPassword')
}

ext.pluginXml = new XmlSlurper().parse(file("src/main/resources/META-INF/plugin.xml"))
version = pluginXml.version

intellij {
    plugins = ['android', deps.build.kotlinIdeaPlugin, 'java']
    version = deps.versions.intellij
    // localPath = '/Applications/Android Studio.app'
    updateSinceUntilBuild = false
    sandboxDir = "${project.gradle.gradleHomeDir}/caches/intellij"
    downloadSources = true

    // Uncomment to test against Android Studio
    // alternativeIdePath = '/Applications/Android Studio.app'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
}

afterEvaluate {
    artifacts {
        archives sourcesJar
        archives project.tasks.getByName("buildPlugin")
    }
}

publishing {
    repositories {
        if (hasMavenCredentials()) {
            maven {
                url = "${config.build.artifactoryUrl}/${pluginsMavenRepositoryBucket}"
                credentials {
                    username = mavenUser
                    password = mavenPassword
                }
            }
        }
    }
}

if (needToPublishPlugin()) {
    def pluginVersion = VERSION_NAME + "-" + (System.currentTimeMillis() / 1000)
    println("Publishing Intellij plugin $pluginVersion to JetBrains repository")

    publishPlugin {
        token System.getenv("IDEA_PLUGIN_PUBLICATION_TOKEN")
    }

    patchPluginXml {
        version pluginVersion
    }

    build.dependsOn publishPlugin
} else {
    println("Publishing Intellij plugin to JetBrains repository will be skipped")
}

static boolean needToPublishPlugin() {
    def parentCommitsNumber = executeBash("git show -s --pretty=%p HEAD | wc -w").trim().toInteger()
    def isMergeCommit = parentCommitsNumber > 0
    def isMainBranch = System.getenv("TRAVIS_BRANCH") == "master"
    def isNotPullRequest = System.getenv("TRAVIS_PULL_REQUEST") == "false"
    def isContainsTemplateChanges = containsTemplateChanges()
    def isCi = System.getenv("CI") == "true"
    println("Checking IDEA plugin publishing conditions: " +
            "isMergeCommit = $isMergeCommit, " +
            "isMainBranch = $isMainBranch, " +
            "isContainsTemplateChanges = $isContainsTemplateChanges, " +
            "isNotPullRequest = $isNotPullRequest, " +
            "isCi = $isCi")
    return isMergeCommit && isMainBranch && isNotPullRequest && isContainsTemplateChanges && isCi
}

static boolean containsTemplateChanges() {
    def lastCommitChangedFiles = executeBash("git diff --name-only HEAD~1 HEAD").split("\n")
    def changedTemplateFilesCount = lastCommitChangedFiles.count {
        it.startsWith("android/templates/src") || it.startsWith("android/tooling/rib-intellij-plugin")
    }
    println("Changed files:")
    println(lastCommitChangedFiles)
    return changedTemplateFilesCount > 0
}

static String executeBash(String command) {
    def proc = ['bash', '-c', command].execute()
    proc.waitFor()
    return proc.text
}
